<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
	http://www.springframework.org/schema/beans/spring-beans.xsd    
	http://www.springframework.org/schema/aop    
	http://www.springframework.org/schema/aop/spring-aop.xsd    
	http://www.springframework.org/schema/tx    
	http://www.springframework.org/schema/tx/spring-tx.xsd    
	http://www.springframework.org/schema/context    
	http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 配置Spring整合shiro -->
	<!-- 编写realm类 -->
	<bean id="authRealm" class="com.web.shiro.AuthRealm">
	</bean>

	<!-- 配置安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 自己编写一个realm域对象 -->
		<property name="realm" ref="authRealm" />
	</bean>

	<!-- Spring框架需要整合shiro安全框架 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- 注入安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 登录页面  没有认证(登录)的用户跳转的页面 -->
		<property name="loginUrl" value="/login.jsp" />
		<!-- 认证成功了，跳转的页面 <property name="successUrl" value=""/> -->
		<!-- 没有权限的跳转页面 -->
		<property name="unauthorizedUrl" value="/index.jsp" />
		<!-- 定义访问的规则 -->
		<property name="filterChainDefinitions">
			<!-- /**代表下面的多级目录也过滤 -->
			<value>
				<!--那些资源不用登陆就能访问-->
				/login.jsp = anon
				/index.jsp = anon
				/user/** = anon
				/images/** = anon
				<!--那些资源必须具备那些权限才能访问-->
				/admin/** = perms["admin"]
				/teacher/** = perms["teacher"]
				/student/** = perms["stud-ent"]
				<!--那些资源必须登陆才能访问-->
				/** = authc
				/*.* = authc
			</value>
		</property>
	</bean>

	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 生成代理，通过代理进行控制 -->
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>

	<!-- 安全管理器 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>














